// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$connector-name: 'connector';
$connector-x: 0px;
$connector-y: 0px;
$connector-offset-x: 0px;
$connector-offset-y: 0px;
$connector-width: 138px;
$connector-height: 32px;
$connector-total-width: 175px;
$connector-total-height: 90px;
$connector-image: 'sprite.png';
$connector: (0px, 0px, 0px, 0px, 138px, 32px, 175px, 90px, 'sprite.png', 'connector', );
$finish-name: 'finish';
$finish-x: 138px;
$finish-y: 0px;
$finish-offset-x: -138px;
$finish-offset-y: 0px;
$finish-width: 37px;
$finish-height: 66px;
$finish-total-width: 175px;
$finish-total-height: 90px;
$finish-image: 'sprite.png';
$finish: (138px, 0px, -138px, 0px, 37px, 66px, 175px, 90px, 'sprite.png', 'finish', );
$heart-sm-name: 'heart-sm';
$heart-sm-x: 66px;
$heart-sm-y: 60px;
$heart-sm-offset-x: -66px;
$heart-sm-offset-y: -60px;
$heart-sm-width: 23px;
$heart-sm-height: 20px;
$heart-sm-total-width: 175px;
$heart-sm-total-height: 90px;
$heart-sm-image: 'sprite.png';
$heart-sm: (66px, 60px, -66px, -60px, 23px, 20px, 175px, 90px, 'sprite.png', 'heart-sm', );
$heart-name: 'heart';
$heart-x: 94px;
$heart-y: 32px;
$heart-offset-x: -94px;
$heart-offset-y: -32px;
$heart-width: 26px;
$heart-height: 23px;
$heart-total-width: 175px;
$heart-total-height: 90px;
$heart-image: 'sprite.png';
$heart: (94px, 32px, -94px, -32px, 26px, 23px, 175px, 90px, 'sprite.png', 'heart', );
$link-name: 'link';
$link-x: 66px;
$link-y: 32px;
$link-offset-x: -66px;
$link-offset-y: -32px;
$link-width: 28px;
$link-height: 28px;
$link-total-width: 175px;
$link-total-height: 90px;
$link-image: 'sprite.png';
$link: (66px, 32px, -66px, -32px, 28px, 28px, 175px, 90px, 'sprite.png', 'link', );
$photos-name: 'photos';
$photos-x: 138px;
$photos-y: 66px;
$photos-offset-x: -138px;
$photos-offset-y: -66px;
$photos-width: 32px;
$photos-height: 24px;
$photos-total-width: 175px;
$photos-total-height: 90px;
$photos-image: 'sprite.png';
$photos: (138px, 66px, -138px, -66px, 32px, 24px, 175px, 90px, 'sprite.png', 'photos', );
$runner-name: 'runner';
$runner-x: 0px;
$runner-y: 32px;
$runner-offset-x: 0px;
$runner-offset-y: -32px;
$runner-width: 66px;
$runner-height: 58px;
$runner-total-width: 175px;
$runner-total-height: 90px;
$runner-image: 'sprite.png';
$runner: (0px, 32px, 0px, -32px, 66px, 58px, 175px, 90px, 'sprite.png', 'runner', );
$spritesheet-width: 175px;
$spritesheet-height: 90px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($connector, $finish, $heart-sm, $heart, $link, $photos, $runner, );
$spritesheet: (175px, 90px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
